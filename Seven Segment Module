library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

entity sevensegment is
    Port ( clk  : in  STD_LOGIC;
           in0, in1, in2, in3 : in std_logic_vector(3 downto 0);
           a, b, c, d, e, f, g, dp  : out std_logic;
           an : out std_logic_vector(3 downto 0));
end sevensegment;

architecture Behavioral of sevensegment is

signal digit_val : std_logic_vector(3 downto 0);
signal digit_en : std_logic_vector(3 downto 0);
signal seg_leds : std_logic_vector(6 downto 0);

begin

process(clk)
    variable counter : std_logic_vector(1 downto 0);
    begin
        if clk'event and clk='1' then
            case counter is
                when "00" =>
                    digit_val <= in0;
                    digit_en <= "1110";
                    counter := counter + '1';
                when "01" =>
                    digit_val <= in1;
                    digit_en <= "1101";
                    counter := counter + '1';
                when "10" =>
                    digit_val <= in2;
                    digit_en <= "1011";
                    counter := counter + '1';
                when others =>
                    digit_val <= in3;
                    digit_en <= "0111";
                    counter := counter + '1';
            end case;
      end if;
end process;

process(digit_val)
begin 
seg_leds <= "1111111";
    case digit_val is
        when "0000" => seg_leds <= "0000001"; --0
        when "0001" => seg_leds <= "1001111"; --1
        when "0010" => seg_leds <= "0010010"; --2
        when "0011" => seg_leds <= "0000110"; --3
        when "0100" => seg_leds <= "1001100"; --4
        when "0101" => seg_leds <= "0100100"; --5
        when "0110" => seg_leds <= "0100000"; --6
        when "0111" => seg_leds <= "0001111"; --7
        when "1000" => seg_leds <= "0000000"; --8
        when "1001" => seg_leds <= "0000100"; --9 
        when "1010" => seg_leds <= "0011000"; --P
        when others => seg_leds <= "1111111";
    end case;
    


an <= digit_en;

a <= seg_leds(6);
b <= seg_leds(5);
c <= seg_leds(4);
d <= seg_leds(3);
e <= seg_leds(2);
f <= seg_leds(1);
g <= seg_leds(0);

dp <= '1';

end process; 
end Behavioral;
